/**
 * FilterSpec Schema
 * Zod schema for vibe-to-Google-Places filter mapping
 */

import { z } from 'zod';

/**
 * Experience buckets for diversity enforcement
 */
export const ExperienceBucketSchema = z.enum([
  'trails',      // Hiking, MTB, cycling, outdoor routes
  'adrenaline',  // High-energy activities, sports, adventure
  'nature',      // Natural attractions, parks, scenic spots
  'culture',     // Museums, galleries, historical sites
  'wellness',    // Spas, relaxation, wellness centers
  'nightlife'    // Evening entertainment, social venues
]);

export type ExperienceBucket = z.infer<typeof ExperienceBucketSchema>;

/**
 * Enhanced filter specification for bucket-aware vibe parsing
 * Generated by LLM from user vibe descriptions with diversity awareness
 */
export const FilterSpecSchema = z.object({
  // Core search parameters
  types: z.array(z.string()).min(1).max(15),
  keywords: z.array(z.string()).min(1).max(10),
  
  // Experience diversity
  buckets: z.array(ExperienceBucketSchema).min(1).max(6).default(['trails', 'adrenaline', 'nature', 'culture', 'wellness']),
  
  // Location and distance
  radiusKm: z.number().min(1).max(50).default(10),
  maxTravelMinutes: z.number().min(5).max(120).default(60),
  
  // Context and preferences
  timeOfDay: z.enum(['morning', 'afternoon', 'evening']).nullable().optional(),
  indoorOutdoor: z.enum(['indoor', 'outdoor', 'either']).default('either'),
  energy: z.enum(['chill', 'medium', 'high']).default('medium'),
  
  // Quality filters
  minRating: z.number().min(0).max(5).default(4.0),
  maxPriceLevel: z.number().min(0).max(4).nullable().optional(),
  
  // Exclusions
  avoidFood: z.boolean().default(true),
  avoid: z.array(z.string()).nullable().optional()
});

export type FilterSpec = z.infer<typeof FilterSpecSchema>;

/**
 * Default FilterSpec for fallback scenarios
 */
export const DEFAULT_FILTER_SPEC: FilterSpec = {
  types: ['tourist_attraction', 'park', 'museum'],
  keywords: ['activity', 'experience'],
  buckets: ['trails', 'adrenaline', 'nature', 'culture', 'wellness'],
  radiusKm: 10,
  maxTravelMinutes: 60,
  timeOfDay: null,
  indoorOutdoor: 'either',
  energy: 'medium',
  minRating: 4.0,
  maxPriceLevel: null,
  avoidFood: true,
  avoid: null
};

/**
 * Validate and sanitize FilterSpec
 */
export function validateFilterSpec(input: unknown): FilterSpec {
  try {
    return FilterSpecSchema.parse(input);
  } catch (error) {
    console.warn('FilterSpec validation failed, using defaults:', error);
    return DEFAULT_FILTER_SPEC;
  }
}

/**
 * Merge FilterSpec with defaults
 */
export function mergeWithDefaults(spec: Partial<FilterSpec>): FilterSpec {
  return {
    ...DEFAULT_FILTER_SPEC,
    ...spec
  };
}
