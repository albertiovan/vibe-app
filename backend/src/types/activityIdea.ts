/**
 * Activity Idea & Venue Summary Types
 * 
 * Data models for the two-level Activity → Venues flow
 */

export interface ActivityIdea {
  id: string;
  name: string;
  verbTitle: string; // e.g., "Try indoor climbing", "Explore a museum"
  bucket: string;
  subtype?: string;
  blurb: string; // One-line activity description
  region?: string;
  confidence: number; // 0-1 score
  venues?: VenueSummary[];
  metadata?: {
    energy?: string;
    indoorOutdoor?: string;
    difficulty?: number;
    estimatedDuration?: string;
  };
}

export interface VenueSummary {
  placeId: string;
  name: string;
  imageUrl?: string;
  rating?: number;
  userRatingsTotal?: number;
  blurb?: string; // Venue-specific micro-blurb (≤22 words)
  mapsUrl: string;
  vicinity?: string;
  priceLevel?: number;
  location: {
    lat: number;
    lng: number;
  };
  distance?: number; // km from user
  travelTime?: number; // minutes
  types: string[];
  bucket: string;
}

export interface ActivityIdeaWithVenues extends ActivityIdea {
  venues: VenueSummary[];
  venueStats: {
    totalFound: number;
    averageRating: number;
    priceRange: string;
    regionDistribution: Record<string, number>;
  };
}

/**
 * Transform raw place data to ActivityIdea format
 */
export function transformToActivityIdea(
  place: any,
  bucket: string,
  verbTitle?: string
): ActivityIdea {
  return {
    id: place.placeId || place.id,
    name: place.name,
    verbTitle: verbTitle || generateVerbTitle(place.name, bucket),
    bucket,
    subtype: place.activitySubtype || place.types?.[0],
    blurb: place.blurb || generateDefaultBlurb(bucket),
    region: extractRegion(place.vicinity),
    confidence: place.vibeScore || place.personalizedScore || 0.7,
    venues: place.verifiedVenues ? place.verifiedVenues.map(transformToVenueSummary) : [],
    metadata: {
      energy: place.activityMetadata?.energy,
      indoorOutdoor: place.activityMetadata?.indoorOutdoor,
      difficulty: place.activityMetadata?.difficulty,
      estimatedDuration: place.estimatedDuration
    }
  };
}

/**
 * Transform raw venue data to VenueSummary format
 */
export function transformToVenueSummary(venue: any): VenueSummary {
  return {
    placeId: venue.placeId,
    name: venue.name,
    imageUrl: venue.imageUrl,
    rating: venue.rating,
    userRatingsTotal: venue.userRatingsTotal,
    blurb: venue.blurb, // Will be generated by blurb service
    mapsUrl: venue.mapsUrl || `https://www.google.com/maps/search/?api=1&query_place_id=${venue.placeId}`,
    vicinity: venue.vicinity,
    priceLevel: venue.priceLevel,
    location: {
      lat: venue.coords?.lat || venue.location?.lat,
      lng: venue.coords?.lng || venue.location?.lng
    },
    distance: venue.distance,
    travelTime: venue.travelTime,
    types: venue.evidence?.types || venue.types || [],
    bucket: venue.bucket || 'general'
  };
}

/**
 * Generate verb-led titles for activities
 */
export function generateVerbTitle(name: string, bucket: string): string {
  const verbMappings: Record<string, string[]> = {
    adventure: ['Try', 'Experience', 'Challenge yourself with'],
    nature: ['Explore', 'Discover', 'Walk through'],
    culture: ['Visit', 'Explore', 'Discover'],
    wellness: ['Relax at', 'Unwind with', 'Rejuvenate at'],
    social: ['Meet people at', 'Connect at', 'Socialize at'],
    fitness: ['Work out at', 'Train at', 'Get active at'],
    entertainment: ['Enjoy', 'Experience', 'Have fun at'],
    nightlife: ['Party at', 'Dance at', 'Enjoy drinks at'],
    learning: ['Learn at', 'Study at', 'Discover at'],
    creative: ['Create at', 'Express yourself at', 'Make art at']
  };

  const verbs = verbMappings[bucket] || ['Visit', 'Try', 'Explore'];
  const verb = verbs[Math.floor(Math.random() * verbs.length)];
  
  return `${verb} ${name.toLowerCase()}`;
}

/**
 * Extract region from vicinity string
 */
export function extractRegion(vicinity?: string): string {
  if (!vicinity) return 'Unknown';
  
  const regionMappings = [
    { pattern: /brașov|brasov/i, region: 'Brașov' },
    { pattern: /sinaia/i, region: 'Sinaia' },
    { pattern: /constanța|constanta/i, region: 'Constanța' },
    { pattern: /sibiu/i, region: 'Sibiu' },
    { pattern: /cluj/i, region: 'Cluj-Napoca' },
    { pattern: /timișoara|timisoara/i, region: 'Timișoara' },
    { pattern: /bucurești|bucharest/i, region: 'Bucharest' },
    { pattern: /predeal/i, region: 'Predeal' },
    { pattern: /bușteni|busteni/i, region: 'Bușteni' },
    { pattern: /mamaia/i, region: 'Mamaia' }
  ];

  for (const mapping of regionMappings) {
    if (mapping.pattern.test(vicinity)) {
      return mapping.region;
    }
  }

  return 'Bucharest'; // Default fallback
}

/**
 * Generate default blurbs per bucket
 */
export function generateDefaultBlurb(bucket: string): string {
  const defaultBlurbs: Record<string, string> = {
    adventure: 'Get your adrenaline pumping with exciting activities',
    nature: 'Connect with nature and enjoy the outdoors',
    culture: 'Explore rich history and cultural heritage',
    wellness: 'Relax and rejuvenate your mind and body',
    social: 'Meet new people and enjoy social activities',
    fitness: 'Stay active and maintain your fitness goals',
    entertainment: 'Have fun and enjoy entertaining experiences',
    nightlife: 'Experience vibrant nightlife and social scenes',
    learning: 'Expand your knowledge and learn new skills',
    creative: 'Express your creativity and artistic side'
  };

  return defaultBlurbs[bucket] || 'Discover something new and exciting';
}
